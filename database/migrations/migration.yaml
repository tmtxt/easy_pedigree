---
table: users
from: null
to: pd_1
sql: |
  CREATE TABLE users
  (
  id SERIAL NOT NULL,
  password TEXT NOT NULL,
  username CHARACTER VARYING NOT NULL,
  CONSTRAINT pk_users PRIMARY KEY (id),
  CONSTRAINT un_users UNIQUE (username)
  );

---
table: people
from: null
to: pd_1
sql: |
  CREATE TABLE people
  (
  id serial NOT NULL,
  name CHARACTER VARYING NOT NULL,
  birth_date DATE,
  death_date DATE,
  alive_status BOOLEAN,
  job CHARACTER VARYING,
  address CHARACTER VARYING,
  picture CHARACTER VARYING,
  gender CHARACTER VARYING,
  phone_no BIT VARYING,
  id_card BIT VARYING,
  note TEXT,

  CONSTRAINT pk_people PRIMARY KEY (id)
  );

---
table: people
from: pd_1
to: pd_2
sql: |
  ALTER TABLE people ALTER COLUMN alive_status TYPE SMALLINT
  USING
  CASE
  WHEN false THEN 0
  ELSE 1
  END;

---
table: people
from: pd_2
to: pd_3
sql: |
  ALTER TABLE people ALTER COLUMN phone_no TYPE CHARACTER VARYING;
  ALTER TABLE people ALTER COLUMN id_card TYPE CHARACTER VARYING;

---
table: people
from: pd_3
to: pd_4
sql: |
  ALTER TABLE people ALTER COLUMN gender TYPE SMALLINT
  USING
  CASE
  WHEN null THEN null
  ELSE 1
  END;

---
table: marriage_relations
from: null
to: pd_1
depends:
  - [people, pd_2]
sql: |
  CREATE TABLE marriage_relations
  (
  id BIGSERIAL NOT NULL,
  husband_id BIGINT,
  wife_id BIGINT,
  start_date DATE,
  end_date DATE,
  status SMALLINT,
  note TEXT,

  CONSTRAINT pk_marriage_relations PRIMARY KEY (id),

  CONSTRAINT fk_marriage_relations_husband FOREIGN KEY (husband_id)
  REFERENCES people (id) MATCH SIMPLE
  ON UPDATE CASCADE ON DELETE CASCADE,

  CONSTRAINT fk_marriage_relations_wife FOREIGN KEY (wife_id)
  REFERENCES people (id) MATCH SIMPLE
  ON UPDATE CASCADE ON DELETE CASCADE,

  CONSTRAINT un_marriage_relations_compound UNIQUE (husband_id, wife_id),

  CHECK ((husband_id is not null and wife_id is not null)
  or (husband_id is null and wife_id is not null)
  or (husband_id is not null and wife_id is null))
  );

  CREATE UNIQUE INDEX un_marriage_relations_husband ON marriage_relations (husband_id) WHERE wife_id IS NULL;
  CREATE UNIQUE INDEX un_marriage_relations_wife ON marriage_relations (wife_id) WHERE husband_id IS NULL;

---
table: marriage_relations
from: pd_1
to: pd_2
sql: |
  ALTER TABLE marriage_relations ADD COLUMN "order" SMALLINT;

---
table: people_hierarchy_relations
from: null
to: pd_1
depends:
  - [people, pd_2]
sql: |
  CREATE TABLE people_hierarchy_relations
  (
  id BIGSERIAL NOT NULL,
  father_id BIGINT,
  mother_id BIGINT,
  child_id BIGINT NOT NULL,
  child_order SMALLINT,

  CONSTRAINT pk_people_hierarchy_relations PRIMARY KEY (id),

  CONSTRAINT fk_people_hierarchy_relations_father FOREIGN KEY (father_id)
  REFERENCES people(id) MATCH SIMPLE
  ON UPDATE CASCADE ON DELETE CASCADE,

  CONSTRAINT fk_people_hierarchy_relations_mother FOREIGN KEY (mother_id)
  REFERENCES people(id) MATCH SIMPLE
  ON UPDATE CASCADE ON DELETE CASCADE,

  CONSTRAINT un_people_hierarchy_relations_compound UNIQUE (father_id, mother_id, child_id),

  CHECK ((father_id IS NOT NULL AND mother_id IS NOT NULL)
  OR (father_id IS NULL AND mother_id IS NOT NULL)
  OR (father_id IS NOT NULL AND mother_id IS NULL))
  );

  CREATE UNIQUE INDEX un_people_hierarchy_relations_father
  ON people_hierarchy_relations (father_id, child_id)WHERE mother_id IS NULL;
  CREATE UNIQUE INDEX un_people_hierarchy_relations_mother
  ON people_hierarchy_relations (mother_id, child_id) WHERE father_id IS NULL;

---
table: people_hierarchy_relations
from: pd_1
to: pd_2
sql: |
  ALTER TABLE people_hierarchy_relations
  ADD CONSTRAINT fk_people_hierarchy_relations_child
  FOREIGN KEY (child_id) REFERENCES people(id) MATCH SIMPLE
  ON UPDATE CASCADE ON DELETE CASCADE;

---
table: pedigrees
from: null
to: pd_1
depends:
  - [people, pd_2]
sql: |
  CREATE TABLE pedigrees
  (
  root_id BIGINT NOT NULL,
  note TEXT,
  information TEXT,
  place CHARACTER VARYING,

  CONSTRAINT pk_pedigrees PRIMARY KEY (root_id),

  CONSTRAINT fk_pedigrees_root FOREIGN KEY (root_id)
  REFERENCES people(id) MATCH SIMPLE
  ON UPDATE CASCADE ON DELETE CASCADE
  );

---
table: pedigrees
from: pd_1
to: pd_2
sql: |
  ALTER TABLE pedigrees DROP CONSTRAINT pk_pedigrees;
  ALTER TABLE pedigrees ADD COLUMN id BIGSERIAL NOT NULL;
  ALTER TABLE pedigrees ADD CONSTRAINT pk_pedigrees PRIMARY KEY (id);
  CREATE UNIQUE INDEX un_pedigrees_root ON pedigrees (root_id);

---
table: people_hierarchy_relations_union
from: null
to: pd_1
depends:
  - [people_hierarchy_relations, pd_2]
sql: |
  CREATE VIEW people_hierarchy_relations_union AS
  SELECT
  ph.father_id AS inside_parent_id,
  p1.name AS inside_parent_name,
  ph.mother_id AS outside_parent_id,
  p2.name AS outside_parent_name,
  ph.child_id AS child_id,
  p3.name AS child_name,
  ph.child_order AS child_order
  FROM people_hierarchy_relations AS ph, people AS p1, people AS p2, people AS p3
  WHERE ph.father_id = p1.id
  AND ph.mother_id = p2.id
  AND ph.child_id = p3.id
  UNION
  SELECT
  ph.mother_id AS inside_parent_id,
  p1.name AS inside_parent_name,
  ph.father_id AS outside_parent_id,
  p2.name AS outside_parent_name,
  ph.child_id AS child_id,
  p3.name AS child_name,
  ph.child_order AS child_order
  FROM people_hierarchy_relations AS ph, people AS p1, people AS p2, people AS p3
  WHERE ph.mother_id = p1.id
  AND ph.father_id = p2.id
  AND ph.child_id = p3.id;

---
table: people_hierarchy_relations_union
from: pd_1
to: pd_2
sql: |
  DROP VIEW people_hierarchy_relations_union;
  CREATE VIEW people_hierarchy_relations_union AS
  SELECT
  ph.father_id AS inside_parent_id,
  p1.name AS inside_parent_name,
  ph.mother_id AS outside_parent_id,
  p2.name AS outside_parent_name,
  ph.child_id AS child_id,
  p3.name AS child_name,
  p3.picture AS child_picture,
  ph.child_order AS child_order
  FROM people_hierarchy_relations AS ph, people AS p1, people AS p2, people AS p3
  WHERE ph.father_id = p1.id
  AND ph.mother_id = p2.id
  AND ph.child_id = p3.id
  UNION
  SELECT
  ph.mother_id AS inside_parent_id,
  p1.name AS inside_parent_name,
  ph.father_id AS outside_parent_id,
  p2.name AS outside_parent_name,
  ph.child_id AS child_id,
  p3.name AS child_name,
  p3.picture AS child_picture,
  ph.child_order AS child_order
  FROM people_hierarchy_relations AS ph, people AS p1, people AS p2, people AS p3
  WHERE ph.mother_id = p1.id
  AND ph.father_id = p2.id
  AND ph.child_id = p3.id;

---
table: people_hierarchy_relations_union
from: pd_2
to: pd_3
sql: |
  DROP VIEW people_hierarchy_relations_union;
  CREATE VIEW people_hierarchy_relations_union AS
  SELECT
  ph.father_id AS inside_parent_id,
  p1.name AS inside_parent_name,
  ph.mother_id AS outside_parent_id,
  p2.name AS outside_parent_name,
  ph.child_id AS child_id,
  p3.name AS child_name,
  p3.picture AS child_picture,
  ph.child_order AS child_order
  FROM people_hierarchy_relations AS ph, people AS p1, people AS p2, people AS p3
  WHERE ph.father_id = p1.id
  AND ph.mother_id = p2.id
  AND ph.child_id = p3.id
  UNION
  SELECT
  ph.mother_id AS inside_parent_id,
  p1.name AS inside_parent_name,
  ph.father_id AS outside_parent_id,
  p2.name AS outside_parent_name,
  ph.child_id AS child_id,
  p3.name AS child_name,
  p3.picture AS child_picture,
  ph.child_order AS child_order
  FROM people_hierarchy_relations AS ph, people AS p1, people AS p2, people AS p3
  WHERE ph.mother_id = p1.id
  AND ph.father_id = p2.id
  AND ph.child_id = p3.id
  UNION
  SELECT
  ph.father_id AS inside_parent_id,
  p1.name AS inside_parent_name,
  ph.mother_id AS outside_parent_id,
  NULL,
  ph.child_id AS child_id,
  p3.name AS child_name,
  p3.picture AS child_picture,
  ph.child_order AS child_order
  FROM people_hierarchy_relations AS ph, people AS p1, people AS p3
  WHERE ph.father_id = p1.id
  AND ph.mother_id IS NULL
  AND ph.child_id = p3.id
  UNION
  SELECT
  ph.mother_id AS inside_parent_id,
  p1.name AS inside_parent_name,
  ph.father_id AS outside_parent_id,
  NULL,
  ph.child_id AS child_id,
  p3.name AS child_name,
  p3.picture AS child_picture,
  ph.child_order AS child_order
  FROM people_hierarchy_relations AS ph, people AS p1, people AS p3
  WHERE ph.mother_id = p1.id
  AND ph.father_id IS NULL
  AND ph.child_id = p3.id;